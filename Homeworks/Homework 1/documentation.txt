В самото начало правя проверка, тъй като се искат да са четири параметъра дали подадените от потребителя, дали са толкова, ако не exit 1 със съобщение за грешка.
В почти всички примери които ще описвам в документацията, ако нещо не е изпълнено ще се дава съобщение за грешка, като >&2 ще пренасочвам stdout към stderr.
После проверявам дали четирите подадени параметъра дали са празни стрингове, в четири отделни, за всеки, проверки, и ако са, се прекратява с exit 2, 3, 4, 5 и съответните съобщения за грешка.
След което проверявам дали съществуват вече такива директории за (от примера) finished и unfinished, пак в две отделни проверки, ако съществуват, exit 6, 7 и съобщение за грешка.
Правя проверка дали четвъртия параметър е съществуващ файл и ако да, съобщение за грешка и exit 8.
Важна проверка е дали първият параметър е съществуващ архив, ако не exit 9 със съобщение за грешка.
Следващата проверка е дали разширението на подаденото име за файл като четвърти аргумент завършва със .txt, защото лично според мен няма да е коректно да бъде подадено име с разширение .sh, .awk или друго и ние да го третираме като файл в които ще вкарваме текст (не код) и ако не е с правилно разширение exit 10 със съобщение за грешка.
Следващатa ми проверка е дали подадения на първа позиция параметър е с разширение .zip, защото все пак като се подава зип архив е нужно разширението му да е правилно, ако не exit 11 със съобщение за грешка.
Много вашно нещо е да проверим дали формата на първия параметър е правилен като го извличам с командата file и съответните cut-ове, за да остане само формата, без останалата част от изведеното на екрана от командата и проверявам дали отговаря на "Zip", ако не exit 12 със съобщение за грешка.
За още подсигуряване ще проверим и за имената на параметрите дали са еднакви, трябва да проверим дали имената на първия, втория, третия и четвъртия параметър си съвпада с един от останалите, ако да exit 13 със съобщение за грешка. 
Вече след всичките тези проверки за подадените параметри и подсигуряването че не съществуват двете директории и файл е време да ги създадем.
Ако е възникнала грешка, при създаването на двете директории и файл, се прекратява съответно с exit 14, 15, 16 съответните за всяка проверка съобщения за грешки.
За удобство си слагам параметрите $1, $2, $3, $4 да са съответно zipArch, passedDir, failedDir, report.
Създавам една temp директория с името tempDir с командата mktemp -d в която ще бъде разархивиран първоначалния zip.
Разпакетирам първоначалния zip с (unzip -q (за да не показва нищо на екрана) -d (за къде искам да му укажа да се разархивира)) и ако е възникнала грешка се прекратява изпълнението на програмата (exit 17) със съответнотo съобщение за грешка.
След като е разархивиран първия параметър в temp директория следва да обходим получените директории.
Пускам find да търси в тази темп директория и сортирам данните (за да да се избегне после сортировка на от примера (flags.txt)) и почвам да ги обхождам с while цикъл.
Тъй като във report (aka flags.txt) ще имаме фн флаг1 флаг2 флаг3 флаг4 където флаг1, флаг2, флаг3, флаг4 за 0 или 1 и затова още в началото си ги задавам като параметри = 0.
Имам проверка, ако редът на който съм или иначе от while цикълът не е директория, тогава давам директно continue, без да изкарвам нищо на екрана.
От това че трабва да проверяваме за имената на архивите впоследствие, аз вадя в една променлива името на директорията, и по-специфично, самият факултетен номер от името на директорията със cut и аwk в променливата nameDir.
Правя проверка дали е празен стринга nameDir, ако да, continue, защото все пак няма как да работим правилно ако е празен. 
Следващата част е да проверя дали в дадена директория има повече от един предаден файл (в moodle) и ако да, това почти навсякъде го правя, проверявам дали в директорията unfinished има вече създадена директория с име факултетния номер на съответния студент, ако не, я създавам и отново правя проверка, ако не е успяло да се копира съдържанието в нея, да изведе съответното съобщение за грешка, ако всичко е наред, значи са се копирали предадените работи.
След като сме направили тази проверка следва вече да видим какви са тези архиви вътре в директориите, като аз изкарвам какво има вътре в дадената директория от предадените работи на съответния студент с командата find "$dir" -type f, тъй като те се третират като файлове и ги подавам на while цикъл, за да работя вече със самия архив. 
Имам променлива archiveName, която е пълното име на архива с разширението, в което последствие проверяваме.
Имам currArchName което е името на архива преди разширението (примерно 62546.tar.xz да е само 62546).
Format което както по-нагоре за формата на архива е извлечено самият формат на архива, като при работа по домашното забелязах че има и .tar, което е POSIX tar, което е от две думи, а останалите xz,bzip2,gzip,rar,zip са само една дума и затова имам специално написан awk, който да може да хване и двете части "POSIX", "tar" и ако е една, от предните формати.
Extension която изкарва раширението на архива.
С наличието на тези променливи можем вече да зададем стойности на първите две колони от report-а.
Ако името на архива не е като това от директорията в която е (от moodle) или разширението не е tar.xz тогава флаг1 се вдига и става 1, ако не си остава 0.
Ако форматът на архива не е XZ тогава флаг2 се вдига и става 1, ако не си остава 0.
За другите два флага от другите две колони вече трябва да разархивираме архива който е в директорията.
Следва проверката: ако форматът на архива (с малки букви, защото всички формати са с различни големини пример (XZ е само с главни, но Zip има и главни и малки), като използвам командата tr [:upper:] [:lower:] подпомогнато от сайта https://www.networkworld.com/article/3529409/converting-between-uppercase-and-lowercase-on-the-linux-command-line.html ги правя всички големи букви, малки) е един от следните : xz, posix tar, bzip2, gzip, rar, zip, тогава скриптът ни трябва да се справи с разархивирането. Ако не е един от тези формати, тогава проверявам дали има директория с името факултетния номер на студента в unfinished, ако не създавам, и копирам нещата от директорията от moodle в нея. Ако е един от посочените формати тогава се започва процедура по справяне с разархивирането.
Създавам temp директория в която ще разархивирам файловете под име tempFinishedDir и в нея ще правя проверките за трета и четвърта колона от report.
Ако форматът е от тип RAR тогава започва процедура по разархивиране с командата unrar -inul (за да не изкарва никакви съобщения) x (за да извлече данните с пълен път) "$archive" (архивът) и 2> /dev/null за да не изкарва нищо от stderr. Ако нещо по време на разархивирането се е объркало, то се създава директория в unfinished с име фн на студента ако няма такава и копира архива вътре в тази директория. 
Следващата част от кода ще я обясня малко по-надолу тъй като тя е еднаква и за случаите Zip|(XZ, bzip2, gzip, posix tar).
Ако форматът е от тип Zip тогава ползвам unzip -q (да извършва операциите тихо) "$archive" (архивът) -d (да укажа къде искам да се разархивира) "$tempFinishedDir" 2> /dev/null. Ако операцията е неуспешна се създава директория в unfinished с име фн на студента, ако я няма, и се копира архива в нея.
И ако форматът е от тип (XZ, gzip, bzip2, POSIX tar) тогава разархивирам с командата tar -xf (x - за извличане на файловете от архива и f - да използва архива подаден иначе ще търси 'TAPE', но не и v (verbose), за да не изкарва нищо на екрана) -C (за да укажа къде искам да се разархивира) "$tempFinishedDir" 2> /dev/null. Ако нещо е неуспешно по време на разархивирането, тогава се създава директория в unfinished с име фн на студента, ако няма, и се копира архива в нея. Тази команда, която съм използвал, се справя с четирите посочени формата в тази точка на описанието.
Ако всичко е наред при разархивирането следва частта която казах, че по-надолу ще обясня, която е еднаква и за трите случая.
Ако няма директория с име факултетния номер в директорията finished, тогава създавам ("$passedDir"/"$nameDir" (фн от директорията от moodle)).
Ако на първо ниво навътре от tempFinishedDir има само едно нещо (използвам egrep -v '^._' защото установих в един от случаите, че на първо ниво има директорията която е видима и на пръв поглед казваме че има една директория, но find "$tempFinishedDir" -mindepth 1 -maxdepth 1 -type d показва че има две директории и едната се оказва че е скрита директория и не работи правилно, защото отчита че са 2 директории, а не една както ни трябва) и ако това е директория тогава проверявам дали името си съответства с това, което е от на директорията на студента предадена от moodle, ако не флаг4 става 1. 
Ако е едно нещо на първо ниво и е нещо различно от директория флаг3 (за липсваща директория) и флаг4(за неправилно име на директорията) стават 1.
Ако на първо ниво има повече от едно нещо, тогава пак флаг3 и флаг4 се вдигат, защото ако са само две или повече директории, то тогава считам, че няма директория и е грешно името (не третирам специално __MACOSX) или пък ако е директория/рии и файл/ове тогава пак.
И последната част, която е след като сме приключили с флаговете, е да се погрижим е да прехвърлим файловете в съответната им директория във finished.
С find "$tempFinishedDir" -type f (взимаме всички файлове в temp директорията) и с командата  xargs -I {} mv {} ""$passedDir"/"$nameDir"" ги местим в съответната им директория във finished. В случай на грешка се изкарва съобщение на екрана.
Използвам командата echo "$nameDir $flag1 $flag2 $flag3 $flag4" >> "$report", която на всяка итерация на цикъла while, в който съм, добавя най-отдолу на файлът report факултетния номер на съответния студент и четирите флага разделени със space, в сортиран ред по фн от по-нагоре описаното, където сортирам. Ако възникне грешка при добавянето най-отзад на текста във файла, се извежда съобщение за грешка, за да бъдем уведомени че е станало нещо и continue.  
Сега като на последна стъпка чистим с rm -r "$tempFinishedDir", която съм ползвал за разархивирането на архивите.
И накрая, извън най-външния while цикъл, с rm -r "$tempDir" която създадохме в началото за разархивиране на първия зип архив, който е първия параметър.
Други линкове, които съм ползвал са:
https://superuser.com/questions/674206/how-do-you-extract-a-particular-directory-from-a-multi-part-rar-using-unrar-cli - за разархивиране на rar архив.
https://www.cyberciti.biz/faq/linux-howto-unzip-files-in-root-directory/ - за разархивиране на zip архив.
https://www.cyberciti.biz/faq/howto-extract-tar-file-to-specific-directory-on-unixlinux/ - за разархивиране на tar(xz, bzip2, gzip, или само tar) в специална директория.
Man pages за различните неща по време на писането на домашното. 
